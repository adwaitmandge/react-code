{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adwait\\\\OneDrive\\\\Desktop\\\\react-advanced-2020\\\\src\\\\tutorial\\\\2-useEffect\\\\setup\\\\1-useEffect-basics.js\";\nimport React, { useState, useEffect } from 'react'; // by default useEffect runs after every re-render\n// cleanup function\n// second parameter\n//The useEffect() hook allows you to work on side-effects, basically you can work on anything that is outside your component, even console.log() is considered as a side-effect\n// useEffect() is used in all instances of data-fetching, signing up for subscriptions and stuff along those lines\n//The way useEffect() works is that you pass in a callback that runs after every render\n\nconst UseEffectBasics = () => {\n  const [value, setValue] = useState(0); //Each and every time we click the button, we are invoking setValue, useState preserves the values between subsequent renders and triggers re-renders, so everytime you click the button you are triggering the useEffect()\n  //Although, we cannot use \n\n  useEffect(() => {\n    console.log(\"useEffect\");\n    document.title = `New Messages ${value}`;\n  });\n  console.log('render component');\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, value), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn\",\n    onClick: () => setValue(val => val + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, \"Click Me!\"));\n};\n\nexport default UseEffectBasics;","map":{"version":3,"sources":["C:/Users/Adwait/OneDrive/Desktop/react-advanced-2020/src/tutorial/2-useEffect/setup/1-useEffect-basics.js"],"names":["React","useState","useEffect","UseEffectBasics","value","setValue","console","log","document","title","val"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;AACA;AACA;AAEA;AAEA;AAEA;;AACA,MAAMC,eAAe,GAAG,MAAM;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CAAD,CAAlC,CAD4B,CAG5B;AAEA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAC,IAAAA,QAAQ,CAACC,KAAT,GAAkB,gBAAeL,KAAM,EAAvC;AACD,GAHQ,CAAT;AAKAE,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,KAAL,CADF,eAEE;AAAQ,IAAA,SAAS,EAAC,KAAlB;AAAwB,IAAA,OAAO,EAAE,MAAMC,QAAQ,CAAEK,GAAD,IAASA,GAAG,GAAG,CAAhB,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,CADF;AAMD,CAlBD;;AAoBA,eAAeP,eAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// by default useEffect runs after every re-render\r\n// cleanup function\r\n// second parameter\r\n\r\n//The useEffect() hook allows you to work on side-effects, basically you can work on anything that is outside your component, even console.log() is considered as a side-effect\r\n\r\n// useEffect() is used in all instances of data-fetching, signing up for subscriptions and stuff along those lines\r\n\r\n//The way useEffect() works is that you pass in a callback that runs after every render\r\nconst UseEffectBasics = () => {\r\n  const [value, setValue] = useState(0);\r\n\r\n  //Each and every time we click the button, we are invoking setValue, useState preserves the values between subsequent renders and triggers re-renders, so everytime you click the button you are triggering the useEffect()\r\n\r\n  //Although, we cannot use \r\n  useEffect(() => {\r\n    console.log(\"useEffect\");\r\n    document.title = `New Messages ${value}`;\r\n  });\r\n\r\n  console.log('render component');\r\n  return (\r\n    <>\r\n      <h1>{value}</h1>\r\n      <button className='btn' onClick={() => setValue((val) => val + 1)}>Click Me!</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UseEffectBasics;\r\n"]},"metadata":{},"sourceType":"module"}