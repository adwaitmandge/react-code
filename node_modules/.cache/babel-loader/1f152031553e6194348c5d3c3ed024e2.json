{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adwait\\\\OneDrive\\\\Desktop\\\\react-advanced-2020\\\\src\\\\tutorial\\\\2-useEffect\\\\setup\\\\1-useEffect-basics.js\";\nimport React, { useState, useEffect } from \"react\"; // by default useEffect runs after every re-render\n//The other components of useEffect are :\n// 1.cleanup function\n// 2.second parameter\n//The useEffect() hook allows you to work on side-effects, basically you can work on anything that is outside your component, even console.log() is considered as a side-effect\n// useEffect() is used in all instances of data-fetching, signing up for subscriptions and stuff along those lines\n//The way useEffect() works is that you pass in a callback that runs after every render\n\nconst UseEffectBasics = () => {\n  const [value, setValue] = useState(0); //Each and every time we click the button, we are invoking setValue, useState preserves the values between subsequent renders and triggers re-renders, so everytime you click the button you are triggering the useEffect()\n  //Although we cannot use a hook inside a conditional, we can use a conditional inside a hook, eg:we want the title to change only if the value is greater than 1\n  //The second parameter that we pass into useEffect is usually an array called 'dependency list' and if we pass an empty array it means that the callback i.e the first parameter will only run on the initial render\n  //If we want the useEffect() to get triggered only after changes are made to a specific entity  \n\n  useEffect(() => {\n    console.log(\"useEffect\");\n\n    if (value > 1) {\n      document.title = `New Messages ${value}`;\n    }\n  }, []);\n  console.log(\"render component\");\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, value), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn\",\n    onClick: () => setValue(val => val + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"Click Me!\"));\n};\n\nexport default UseEffectBasics;","map":{"version":3,"sources":["C:/Users/Adwait/OneDrive/Desktop/react-advanced-2020/src/tutorial/2-useEffect/setup/1-useEffect-basics.js"],"names":["React","useState","useEffect","UseEffectBasics","value","setValue","console","log","document","title","val"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;;AACA,MAAMC,eAAe,GAAG,MAAM;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CAAD,CAAlC,CAD4B,CAG5B;AAEA;AAEA;AAEA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AACA,QAAIH,KAAK,GAAG,CAAZ,EAAe;AACbI,MAAAA,QAAQ,CAACC,KAAT,GAAkB,gBAAeL,KAAM,EAAvC;AACD;AACF,GALQ,EAKN,EALM,CAAT;AAOAE,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,KAAL,CADF,eAEE;AAAQ,IAAA,SAAS,EAAC,KAAlB;AAAwB,IAAA,OAAO,EAAE,MAAMC,QAAQ,CAAEK,GAAD,IAASA,GAAG,GAAG,CAAhB,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,CADF;AAQD,CA1BD;;AA4BA,eAAeP,eAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n// by default useEffect runs after every re-render\r\n\r\n//The other components of useEffect are :\r\n// 1.cleanup function\r\n// 2.second parameter\r\n\r\n//The useEffect() hook allows you to work on side-effects, basically you can work on anything that is outside your component, even console.log() is considered as a side-effect\r\n\r\n// useEffect() is used in all instances of data-fetching, signing up for subscriptions and stuff along those lines\r\n\r\n//The way useEffect() works is that you pass in a callback that runs after every render\r\nconst UseEffectBasics = () => {\r\n  const [value, setValue] = useState(0);\r\n\r\n  //Each and every time we click the button, we are invoking setValue, useState preserves the values between subsequent renders and triggers re-renders, so everytime you click the button you are triggering the useEffect()\r\n\r\n  //Although we cannot use a hook inside a conditional, we can use a conditional inside a hook, eg:we want the title to change only if the value is greater than 1\r\n\r\n  //The second parameter that we pass into useEffect is usually an array called 'dependency list' and if we pass an empty array it means that the callback i.e the first parameter will only run on the initial render\r\n\r\n  //If we want the useEffect() to get triggered only after changes are made to a specific entity  \r\n  useEffect(() => {\r\n    console.log(\"useEffect\");\r\n    if (value > 1) {\r\n      document.title = `New Messages ${value}`;\r\n    }\r\n  }, []);\r\n\r\n  console.log(\"render component\");\r\n  return (\r\n    <>\r\n      <h1>{value}</h1>\r\n      <button className=\"btn\" onClick={() => setValue((val) => val + 1)}>\r\n        Click Me!\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UseEffectBasics;\r\n"]},"metadata":{},"sourceType":"module"}