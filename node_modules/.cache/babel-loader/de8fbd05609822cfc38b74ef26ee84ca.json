{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adwait\\\\OneDrive\\\\Desktop\\\\React Coding Addict\\\\react-advanced-2020\\\\src\\\\tutorial\\\\5-useRef\\\\setup\\\\1-useRef-basics.js\";\nimport React, { useEffect, useRef } from \"react\"; //useRef works a lot like useState\n// preserves value in between renders\n// DOES NOT trigger re-render unlike usestate\n// target DOM nodes/elements\n//we invoke useRef and then assign it to a container, by passing some kind of initial value and then pass it to the ref attribute in our input field\n//useRef allows us to set uncontrolled inputs\n\nconst UseRefBasics = () => {\n  const refContainer = useRef(\"\");\n  const divContainer = useRef(\"\");\n\n  const handleSubmit = e => {\n    //when we submit the form, since we added the 'ref' attribute to the input, the 'current' property will hold the value of our input\n    e.preventDefault();\n    console.log(refContainer.current.value);\n  }; //refContainer is an object containing a property called current which is initially set to the initial value that is passed to useRef\n\n\n  console.log(refContainer);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    ref: refContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }, \"Submit\"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default UseRefBasics;","map":{"version":3,"sources":["C:/Users/Adwait/OneDrive/Desktop/React Coding Addict/react-advanced-2020/src/tutorial/5-useRef/setup/1-useRef-basics.js"],"names":["React","useEffect","useRef","UseRefBasics","refContainer","divContainer","handleSubmit","e","preventDefault","console","log","current","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC,C,CAEA;AAEA;AACA;AACA;AAEA;AAEA;;AACA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAMC,YAAY,GAAGF,MAAM,CAAC,EAAD,CAA3B;AACA,QAAMG,YAAY,GAAGH,MAAM,CAAC,EAAD,CAA3B;;AACA,QAAMI,YAAY,GAAIC,CAAD,IAAO;AAC1B;AACAA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,YAAY,CAACO,OAAb,CAAqBC,KAAjC;AACD,GAJD,CAHyB,CASzB;;;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAYN,YAAZ;AACA,sBACE,uDACE;AAAM,IAAA,QAAQ,EAAEE,YAAhB;AAA8B,IAAA,SAAS,EAAC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,GAAG,EAAEF,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CADF,CADF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAaD,CAxBD;;AA0BA,eAAeD,YAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\n\r\n//useRef works a lot like useState\r\n\r\n// preserves value in between renders\r\n// DOES NOT trigger re-render unlike usestate\r\n// target DOM nodes/elements\r\n\r\n//we invoke useRef and then assign it to a container, by passing some kind of initial value and then pass it to the ref attribute in our input field\r\n\r\n//useRef allows us to set uncontrolled inputs\r\nconst UseRefBasics = () => {\r\n  const refContainer = useRef(\"\");\r\n  const divContainer = useRef(\"\");\r\n  const handleSubmit = (e) => {\r\n    //when we submit the form, since we added the 'ref' attribute to the input, the 'current' property will hold the value of our input\r\n    e.preventDefault();\r\n    console.log(refContainer.current.value);\r\n  };\r\n\r\n  //refContainer is an object containing a property called current which is initially set to the initial value that is passed to useRef\r\n  console.log(refContainer);\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit} className=\"form\">\r\n        <div>\r\n          <input type=\"text\" ref={refContainer} />\r\n          <button type=\"submit\" className=\"btn\">\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n      <div ></div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UseRefBasics;\r\n"]},"metadata":{},"sourceType":"module"}