{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adwait\\\\OneDrive\\\\Desktop\\\\React Coding Addict\\\\react-advanced-2020\\\\src\\\\tutorial\\\\5-useRef\\\\setup\\\\1-useRef-basics.js\";\nimport React, { useEffect, useRef } from \"react\"; //useRef works a lot like useState\n// preserves value in between renders\n// DOES NOT trigger re-render unlike usestate\n// target DOM nodes/elements\n//we invoke useRef and then assign it to a container, by passing some kind of initial value and then pass it to the ref attribute in our input field\n//useRef allows us to set uncontrolled inputs\n\nconst UseRefBasics = () => {\n  const ref = useRef(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }, \"Submit\"))));\n};\n\nexport default UseRefBasics;","map":{"version":3,"sources":["C:/Users/Adwait/OneDrive/Desktop/React Coding Addict/react-advanced-2020/src/tutorial/5-useRef/setup/1-useRef-basics.js"],"names":["React","useEffect","useRef","UseRefBasics","ref","handleSubmit","e","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC,C,CAEA;AAEA;AACA;AACA;AAEA;AAEA;;AACA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAMC,GAAG,GAAGF,MAAM,CAAC,EAAD,CAAlB;;AACA,QAAMG,YAAY,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACD,GAFD;;AAGA,sBACE,uDACE;AAAM,IAAA,QAAQ,EAAEF,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CADF,CADF,CADF;AAUD,CAfD;;AAiBA,eAAeF,YAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\n\r\n//useRef works a lot like useState\r\n\r\n// preserves value in between renders\r\n// DOES NOT trigger re-render unlike usestate\r\n// target DOM nodes/elements\r\n\r\n//we invoke useRef and then assign it to a container, by passing some kind of initial value and then pass it to the ref attribute in our input field\r\n\r\n//useRef allows us to set uncontrolled inputs\r\nconst UseRefBasics = () => {\r\n  const ref = useRef(\"\");\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n  };\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <input type=\"text\" />\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UseRefBasics;\r\n"]},"metadata":{},"sourceType":"module"}