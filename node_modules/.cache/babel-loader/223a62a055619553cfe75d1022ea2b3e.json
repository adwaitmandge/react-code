{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adwait\\\\OneDrive\\\\Desktop\\\\react-advanced-2020\\\\src\\\\tutorial\\\\12-memo-useMemo-useCallback\\\\setup\\\\index.js\";\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { useFetch } from \"../../9-custom-hooks/final/2-useFetch\"; // ATTENTION!!!!!!!!!!\n// I SWITCHED TO PERMANENT DOMAIN\n\nconst url = \"https://course-api.com/javascript-store-products\"; // every time props or state changes, component re-renders\n//Every single time you click the 'count' button, it is going to trigger a re-render because a useState preserves values between re-renders and triggers re-renders and so 'Index' component re-renders and subsequently its children component also re-render i.e 'BigList' and re-rendering of 'BigList' triggers re-rendering of 'Single Product' so basically if there are 12 Products then every time you increase the count, useEffect for Big list gets triggered once and that of Single Product gets triggered 12 times as there are 12 products so it is triggered once per product\n// Solution is using the memo function that comes with React i.e React.memo, not to be confused with \n\nconst Index = () => {\n  const {\n    products\n  } = useFetch(url);\n  const [count, setCount] = useState(0);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, \"Count : \", count), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn\",\n    onClick: () => setCount(count + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, \"click me\"), /*#__PURE__*/React.createElement(BigList, {\n    products: products,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst BigList = ({\n  products\n}) => {\n  useEffect(() => {\n    console.log(\"Big List\");\n  });\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"products\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, products.map(product => {\n    return /*#__PURE__*/React.createElement(SingleProduct, Object.assign({\n      key: product.id\n    }, product, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 16\n      }\n    }));\n  }));\n};\n\nconst SingleProduct = ({\n  fields\n}) => {\n  useEffect(() => {\n    console.log(\"Single Product\");\n  });\n  let {\n    name,\n    price\n  } = fields;\n  price = price / 100;\n  const image = fields.image[0].url;\n  return /*#__PURE__*/React.createElement(\"article\", {\n    className: \"product\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: image,\n    alt: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, \"$\", price));\n};\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/Adwait/OneDrive/Desktop/react-advanced-2020/src/tutorial/12-memo-useMemo-useCallback/setup/index.js"],"names":["React","useState","useEffect","useCallback","useMemo","useFetch","url","Index","products","count","setCount","BigList","console","log","map","product","id","SingleProduct","fields","name","price","image"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,EAAkDC,OAAlD,QAAiE,OAAjE;AACA,SAASC,QAAT,QAAyB,uCAAzB,C,CAEA;AACA;;AACA,MAAMC,GAAG,GAAG,kDAAZ,C,CAEA;AAGA;AAEA;;AACA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAM;AAAEC,IAAAA;AAAF,MAAeH,QAAQ,CAACC,GAAD,CAA7B;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,CAAD,CAAlC;AAEA,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAaQ,KAAb,CADF,eAEE;AAAQ,IAAA,SAAS,EAAC,KAAlB;AAAwB,IAAA,OAAO,EAAE,MAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAKE,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAED,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AASD,CAbD;;AAeA,MAAMG,OAAO,GAAG,CAAC;AAAEH,EAAAA;AAAF,CAAD,KAAkB;AAChCN,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACD,GAFQ,CAAT;AAIA,sBACE;AAAS,IAAA,SAAS,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,QAAQ,CAACM,GAAT,CAAcC,OAAD,IAAa;AACzB,wBAAO,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAEA,OAAO,CAACC;AAA5B,OAAoCD,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAFA,CADH,CADF;AAOD,CAZD;;AAcA,MAAME,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgB;AACpChB,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD,GAFQ,CAAT;AAIA,MAAI;AAAEM,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBF,MAAtB;AACAE,EAAAA,KAAK,GAAGA,KAAK,GAAG,GAAhB;AACA,QAAMC,KAAK,GAAGH,MAAM,CAACG,KAAP,CAAa,CAAb,EAAgBf,GAA9B;AAEA,sBACE;AAAS,IAAA,SAAS,EAAC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,GAAG,EAAEe,KAAV;AAAiB,IAAA,GAAG,EAAEF,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,IAAL,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAKC,KAAL,CAHF,CADF;AAOD,CAhBD;;AAkBA,eAAeb,KAAf","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from \"react\";\r\nimport { useFetch } from \"../../9-custom-hooks/final/2-useFetch\";\r\n\r\n// ATTENTION!!!!!!!!!!\r\n// I SWITCHED TO PERMANENT DOMAIN\r\nconst url = \"https://course-api.com/javascript-store-products\";\r\n\r\n// every time props or state changes, component re-renders\r\n\r\n\r\n//Every single time you click the 'count' button, it is going to trigger a re-render because a useState preserves values between re-renders and triggers re-renders and so 'Index' component re-renders and subsequently its children component also re-render i.e 'BigList' and re-rendering of 'BigList' triggers re-rendering of 'Single Product' so basically if there are 12 Products then every time you increase the count, useEffect for Big list gets triggered once and that of Single Product gets triggered 12 times as there are 12 products so it is triggered once per product\r\n\r\n// Solution is using the memo function that comes with React i.e React.memo, not to be confused with \r\nconst Index = () => {\r\n  const { products } = useFetch(url);\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <>\r\n      <h1>Count : {count}</h1>\r\n      <button className=\"btn\" onClick={() => setCount(count + 1)}>\r\n        click me\r\n      </button>\r\n      <BigList products={products} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst BigList = ({ products }) => {\r\n  useEffect(() => {\r\n    console.log(\"Big List\");\r\n  });\r\n\r\n  return (\r\n    <section className=\"products\">\r\n      {products.map((product) => {\r\n        return <SingleProduct key={product.id} {...product}></SingleProduct>;\r\n      })}\r\n    </section>\r\n  );\r\n};\r\n\r\nconst SingleProduct = ({ fields }) => {\r\n  useEffect(() => {\r\n    console.log(\"Single Product\");\r\n  });\r\n\r\n  let { name, price } = fields;\r\n  price = price / 100;\r\n  const image = fields.image[0].url;\r\n\r\n  return (\r\n    <article className=\"product\">\r\n      <img src={image} alt={name} />\r\n      <h4>{name}</h4>\r\n      <p>${price}</p>\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}