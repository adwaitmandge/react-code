{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adwait\\\\OneDrive\\\\Desktop\\\\react-advanced-2020\\\\src\\\\tutorial\\\\3-conditional-rendering\\\\setup\\\\3-show-hide.js\";\nimport React, { useState, useEffect } from \"react\"; //Toggling components\n\nconst ShowHide = () => {\n  const [show, setShow] = useState(false);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn\",\n    onClick: () => setShow(!show),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, \"Show/hide\"), show && /*#__PURE__*/React.createElement(Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 14\n    }\n  }));\n};\n\nconst Item = () => {\n  const [size, setSize] = useState(window.innerWidth);\n\n  const checkSize = () => {\n    setSize(window.innerWidth);\n  }; //Here we are doing the same thing that we did back in use-cleanup.js, the only difference is that now we are rendering the 'Item' component everytime we click the button. Previously we could have avoided the infinite loop stuff by simply passing an empty dependency list as the second argument to useEffect() and by also returning a cleanup function, now we have no choice but to return a cleanup function. The reason why empty dependency list will fail is that it triggers the useEffect callback on the initial render, now , every time we show the <Item /> useEffect will be \n\n\n  useEffect(() => {\n    window.addEventListener('resize', checkSize);\n    return () => {\n      window.removeEventListener('resize', checkSize);\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '2rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, \"Window\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, \"Size :\", size));\n};\n\nexport default ShowHide;","map":{"version":3,"sources":["C:/Users/Adwait/OneDrive/Desktop/react-advanced-2020/src/tutorial/3-conditional-rendering/setup/3-show-hide.js"],"names":["React","useState","useEffect","ShowHide","show","setShow","Item","size","setSize","window","innerWidth","checkSize","addEventListener","removeEventListener","marginTop"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAEA;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,KAAD,CAAhC;AACA,sBACE,uDACA;AAAQ,IAAA,SAAS,EAAC,KAAlB;AAAwB,IAAA,OAAO,EAAE,MAAMI,OAAO,CAAC,CAACD,IAAF,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADA,EAECA,IAAI,iBAAI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFT,CADF;AAMD,CARD;;AAUA,MAAME,IAAI,GAAG,MAAM;AACjB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAACQ,MAAM,CAACC,UAAR,CAAhC;;AAEA,QAAMC,SAAS,GAAG,MAAM;AACtBH,IAAAA,OAAO,CAACC,MAAM,CAACC,UAAR,CAAP;AACD,GAFD,CAHiB,CAOjB;;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCD,SAAlC;AACA,WAAO,MAAM;AACXF,MAAAA,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCF,SAArC;AACD,KAFD;AAGD,GALQ,CAAT;AAOA,sBACE;AAAK,IAAA,KAAK,EAAE;AAACG,MAAAA,SAAS,EAAC;AAAX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAWP,IAAX,CAFF,CADF;AAMD,CArBD;;AAuBA,eAAeJ,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n//Toggling components\r\n\r\nconst ShowHide = () => {\r\n  const [show, setShow] = useState(false);\r\n  return (\r\n    <>\r\n    <button className=\"btn\" onClick={() => setShow(!show)}>Show/hide</button>\r\n    {show && <Item />}  \r\n    </>\r\n  )\r\n};\r\n\r\nconst Item = () => {\r\n  const [size, setSize] = useState(window.innerWidth);\r\n\r\n  const checkSize = () => {\r\n    setSize(window.innerWidth);\r\n  };\r\n\r\n  //Here we are doing the same thing that we did back in use-cleanup.js, the only difference is that now we are rendering the 'Item' component everytime we click the button. Previously we could have avoided the infinite loop stuff by simply passing an empty dependency list as the second argument to useEffect() and by also returning a cleanup function, now we have no choice but to return a cleanup function. The reason why empty dependency list will fail is that it triggers the useEffect callback on the initial render, now , every time we show the <Item /> useEffect will be \r\n  useEffect(() => {\r\n    window.addEventListener('resize', checkSize);\r\n    return () => {\r\n      window.removeEventListener('resize', checkSize);\r\n    };\r\n  });\r\n\r\n  return(\r\n    <div style={{marginTop:'2rem'}}>\r\n      <h1>Window</h1>\r\n      <h2>Size :{size}</h2>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default ShowHide;\r\n"]},"metadata":{},"sourceType":"module"}