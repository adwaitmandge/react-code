{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adwait\\\\OneDrive\\\\Desktop\\\\react-advanced-2020\\\\src\\\\tutorial\\\\6-useReducer\\\\setup\\\\index.js\";\nimport React, { useState, useReducer, useEffect } from 'react';\nimport Modal from './Modal';\nimport { data } from '../../../data'; // reducer function\n//useReducer is going to add more structure to your state\n//everytime you invoke useReducer it is going to return two values, a stateValue and a dispatch function(), when you invoke useReducer you have to pass in a 'reducer' function and a second parameter which is going to be your initial or default state, default state could be an array, an object, a string or a boolean, the stateValue returned by useReducer initially it is going to represent the default value\n//The difference between useState and useReducer is that each and everytime you want to do something with the oldState, you must use dispatch it and it must go through the reducer function and reducer function can be considered as something that takes in something called action and then spits out the newState\n//A reducer function basically takes in two things, first is the state and the second is the action where state is the old or currentState and action is what you want to do with that state so a reducer function is going to manipulate the state once we call 'dispatch' or once we 'dispatch' the 'action'\n//The whole idea of useReducer is that you should be able to update everything at once when you call 'dispatch' and once you pass in the 'action' and all this is going to happen inside the reducer function\n// const Index = () => {\n//   const [people, setPeople] = useState(data);\n//   const [name, setName] = useState('');\n//   const [showModal, setShowModal] = useState(false); \n//   const submitHandler = (e) => {\n//     e.preventDefault();\n//     if(name){\n//       setPeople([...people, {id:new Date().getTime().toString(), name}]);\n//       setName('');\n//     }else{\n//       setShowModal(true);\n//       return;\n//     }\n//   }\n//   return <>\n//     {showModal && <Modal/>}\n//     <form onSubmit={submitHandler} className='form'>\n//       <div>\n//         <input type='text' value={name} onChange={(e) => setName(e.target.value)}></input>\n//       </div>\n//       <button type='submit' className='btn'>Add Item</button>\n//     </form>\n//     {people.map(person => {\n//       const {name, id} = person;\n//       return(\n//         <div key={id} className='item'>\n//           <h4>{name}</h4>\n//         </div>\n//       ) \n//     })}\n//   </>;\n// };\n\nconst reducer = (state, action) => {};\n\nconst defaultState = {\n  people: data,\n  isModalOpen: true,\n  modalContent: 'Hello World!'\n};\n\nconst Index = () => {\n  const [name, setName] = useState('');\n  const [state, setState] = useReducer(reducer, defaultState);\n  const [loading, setLoadin] = useState(true);\n  useEffect(() => {\n    setLoading(false);\n  }, []);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }\n    }, \"Loading....\"));\n  }\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (name) {} else {}\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, state.isModalOpen && /*#__PURE__*/React.createElement(Modal, {\n    modalContent: state.modalContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 27\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, \"Add Item\")), state.people.map(person => {\n    const {\n      name,\n      id\n    } = person;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: id,\n      className: \"item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }, name));\n  }));\n};\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/Adwait/OneDrive/Desktop/react-advanced-2020/src/tutorial/6-useReducer/setup/index.js"],"names":["React","useState","useReducer","useEffect","Modal","data","reducer","state","action","defaultState","people","isModalOpen","modalContent","Index","name","setName","setState","loading","setLoadin","setLoading","submitHandler","e","preventDefault","target","value","map","person","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,IAAT,QAAqB,eAArB,C,CACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB,CAElC,CAFD;;AAIA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAACL,IADY;AAEnBM,EAAAA,WAAW,EAAC,IAFO;AAGnBC,EAAAA,YAAY,EAAC;AAHM,CAArB;;AAMA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACM,KAAD,EAAQS,QAAR,IAAoBd,UAAU,CAACI,OAAD,EAAUG,YAAV,CAApC;AACA,QAAM,CAACQ,OAAD,EAAUC,SAAV,IAAuBjB,QAAQ,CAAC,IAAD,CAArC;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAFQ,EAEP,EAFO,CAAT;;AAIA,MAAGF,OAAH,EAAW;AACT,wBAAO,uDACP;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADO,CAAP;AAKD;;AAED,QAAMG,aAAa,GAAIC,CAAD,IAAO;AAC3BA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAGR,IAAH,EAAQ,CAEP,CAFD,MAEK,CAEJ;AACF,GAPD;;AASA,sBAAO,0CACJP,KAAK,CAACI,WAAN,iBAAqB,oBAAC,KAAD;AAAO,IAAA,YAAY,EAAEJ,KAAK,CAACK,YAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADjB,eAEL;AAAM,IAAA,QAAQ,EAAEQ,aAAhB;AAA+B,IAAA,SAAS,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEN,IAA1B;AAAgC,IAAA,QAAQ,EAAGO,CAAD,IAAON,OAAO,CAACM,CAAC,CAACE,MAAF,CAASC,KAAV,CAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAIE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,CAFK,EAQJjB,KAAK,CAACG,MAAN,CAAae,GAAb,CAAiBC,MAAM,IAAI;AAC1B,UAAM;AAACZ,MAAAA,IAAD;AAAOa,MAAAA;AAAP,QAAaD,MAAnB;AACA,wBACE;AAAK,MAAA,GAAG,EAAEC,EAAV;AAAc,MAAA,SAAS,EAAC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKb,IAAL,CADF,CADF;AAKD,GAPA,CARI,CAAP;AAiBD,CA3CD;;AA6CA,eAAeD,KAAf","sourcesContent":["import React, { useState, useReducer, useEffect } from 'react';\r\nimport Modal from './Modal';\r\nimport { data } from '../../../data';\r\n// reducer function\r\n\r\n//useReducer is going to add more structure to your state\r\n//everytime you invoke useReducer it is going to return two values, a stateValue and a dispatch function(), when you invoke useReducer you have to pass in a 'reducer' function and a second parameter which is going to be your initial or default state, default state could be an array, an object, a string or a boolean, the stateValue returned by useReducer initially it is going to represent the default value\r\n\r\n//The difference between useState and useReducer is that each and everytime you want to do something with the oldState, you must use dispatch it and it must go through the reducer function and reducer function can be considered as something that takes in something called action and then spits out the newState\r\n\r\n//A reducer function basically takes in two things, first is the state and the second is the action where state is the old or currentState and action is what you want to do with that state so a reducer function is going to manipulate the state once we call 'dispatch' or once we 'dispatch' the 'action'\r\n\r\n//The whole idea of useReducer is that you should be able to update everything at once when you call 'dispatch' and once you pass in the 'action' and all this is going to happen inside the reducer function\r\n\r\n// const Index = () => {\r\n//   const [people, setPeople] = useState(data);\r\n//   const [name, setName] = useState('');\r\n//   const [showModal, setShowModal] = useState(false); \r\n\r\n//   const submitHandler = (e) => {\r\n//     e.preventDefault();\r\n//     if(name){\r\n//       setPeople([...people, {id:new Date().getTime().toString(), name}]);\r\n//       setName('');\r\n//     }else{\r\n//       setShowModal(true);\r\n//       return;\r\n//     }\r\n//   }\r\n\r\n//   return <>\r\n//     {showModal && <Modal/>}\r\n//     <form onSubmit={submitHandler} className='form'>\r\n//       <div>\r\n//         <input type='text' value={name} onChange={(e) => setName(e.target.value)}></input>\r\n//       </div>\r\n//       <button type='submit' className='btn'>Add Item</button>\r\n//     </form>\r\n//     {people.map(person => {\r\n//       const {name, id} = person;\r\n//       return(\r\n//         <div key={id} className='item'>\r\n//           <h4>{name}</h4>\r\n//         </div>\r\n//       ) \r\n//     })}\r\n//   </>;\r\n// };\r\n\r\nconst reducer = (state, action) => {\r\n\r\n};\r\n\r\nconst defaultState = {\r\n  people:data,\r\n  isModalOpen:true,\r\n  modalContent:'Hello World!'\r\n};\r\n\r\nconst Index = () => {\r\n  const [name, setName] = useState('');\r\n  const [state, setState] = useReducer(reducer, defaultState)\r\n  const [loading, setLoadin] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setLoading(false);\r\n  },[]); \r\n\r\n  if(loading){\r\n    return <>\r\n    <div className='container'>\r\n      Loading....\r\n    </div>\r\n    </>\r\n  }\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if(name){\r\n      \r\n    }else{\r\n      \r\n    }\r\n  }\r\n\r\n  return <>\r\n    {state.isModalOpen && <Modal modalContent={state.modalContent} />}\r\n    <form onSubmit={submitHandler} className='form'>\r\n      <div>\r\n        <input type='text' value={name} onChange={(e) => setName(e.target.value)}></input>\r\n      </div>\r\n      <button type='submit' className='btn'>Add Item</button>\r\n    </form>\r\n    {state.people.map(person => {\r\n      const {name, id} = person;\r\n      return(\r\n        <div key={id} className='item'>\r\n          <h4>{name}</h4>\r\n        </div>\r\n      ) \r\n    })}\r\n  </>;\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}