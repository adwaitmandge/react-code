{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adwait\\\\OneDrive\\\\Desktop\\\\react-advanced-2020\\\\src\\\\tutorial\\\\11-react-router\\\\setup\\\\index.js\";\nimport React from 'react'; // react router\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'; // pages\n\nimport Home from './Home';\nimport About from './About';\nimport People from './People';\nimport Error from './Error';\nimport Person from './Person'; // navbar\n\nimport Navbar from './Navbar'; // Instead of going back to the server and requesting information about the pages where the user navigates, we set up routing on the client side without refreshing the page, so basically you can switch url's without refreshing the entire page. React does not have internal routing and the most popular routing library in react is ReactRouter which is an external library and not a part of react \n//So basically we wrap whatever index.js is returning withing 'Router', you wrap a rule component within Router\n\nconst ReactRouterSetup = () => {\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Home, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/about\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(About, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/people\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(People, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default ReactRouterSetup;","map":{"version":3,"sources":["C:/Users/Adwait/OneDrive/Desktop/react-advanced-2020/src/tutorial/11-react-router/setup/index.js"],"names":["React","BrowserRouter","Router","Route","Switch","Home","About","People","Error","Person","Navbar","ReactRouterSetup"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,QAAuD,kBAAvD,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAGA;AAEA;;AACA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,sBAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIL,oBAAC,KAAD;AAAQ,IAAA,KAAK,MAAb;AAAc,IAAA,IAAI,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAJK,eAUL,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAVK,eAcL,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAdK,CAAP;AAkBD,CAnBD;;AAqBA,eAAeA,gBAAf","sourcesContent":["import React from 'react';\r\n// react router\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n// pages\r\nimport Home from './Home';\r\nimport About from './About';\r\nimport People from './People';\r\nimport Error from './Error';\r\nimport Person from './Person';\r\n// navbar\r\nimport Navbar from './Navbar';\r\n\r\n\r\n// Instead of going back to the server and requesting information about the pages where the user navigates, we set up routing on the client side without refreshing the page, so basically you can switch url's without refreshing the entire page. React does not have internal routing and the most popular routing library in react is ReactRouter which is an external library and not a part of react \r\n\r\n//So basically we wrap whatever index.js is returning withing 'Router', you wrap a rule component within Router\r\nconst ReactRouterSetup = () => {\r\n  return <Router>\r\n    {/* The way to set the imported components as pages is using the 'Route' and then adding the 'path' to the route\r\n     \r\n    */}\r\n    <Route  exact path=\"/\">\r\n      {/* Here '/' represents the domain of your application, 'localhost' in this case \r\n        Withing the Route you are going to display whatever component you want\r\n      */}\r\n      <Home />\r\n    </Route>\r\n    <Route exact path='/about'>\r\n      {/* If you navigate to '/about' you'll observe that both <Home/> as well as the <About/> components have been rendered, this is because, in react, if a path matches, all components within all the matching paths will be rendered, in order to fix that you'll need to add a prop called 'exact', so now only the component within the exact matching path will be rendered */}\r\n      <About/>\r\n    </Route>\r\n    <Route exact path='/people'>\r\n      <People/>\r\n    </Route>\r\n  </Router>;\r\n};\r\n\r\nexport default ReactRouterSetup;\r\n"]},"metadata":{},"sourceType":"module"}