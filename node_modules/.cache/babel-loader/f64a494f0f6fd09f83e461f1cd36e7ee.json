{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adwait\\\\OneDrive\\\\Desktop\\\\react-advanced-2020\\\\src\\\\tutorial\\\\6-useReducer\\\\setup\\\\index.js\";\nimport React, { useState, useReducer, useEffect } from \"react\";\nimport Modal from \"./Modal\";\nimport { data } from \"../../../data\"; // reducer function\n// const Index = () => {\n//   const [people, setPeople] = useState(data);\n//   const [name, setName] = useState('');\n//   const [showModal, setShowModal] = useState(false);\n//   const submitHandler = (e) => {\n//     e.preventDefault();\n//     if(name){\n//       setPeople([...people, {id:new Date().getTime().toString(), name}]);\n//       setName('');\n//     }else{\n//       setShowModal(true);\n//       return;\n//     }\n//   }\n//   return <>\n//     {showModal && <Modal/>}\n//     <form onSubmit={submitHandler} className='form'>\n//       <div>\n//         <input type='text' value={name} onChange={(e) => setName(e.target.value)}></input>\n//       </div>\n//       <button type='submit' className='btn'>Add Item</button>\n//     </form>\n//     {people.map(person => {\n//       const {name, id} = person;\n//       return(\n//         <div key={id} className='item'>\n//           <h4>{name}</h4>\n//         </div>\n//       )\n//     })}\n//   </>;\n// };\n//useReducer is going to add more structure to your state\n//everytime you invoke useReducer it is going to return two values, a stateValue and a dispatch function(), when you invoke useReducer you have to pass in a 'reducer' function and a second parameter which is going to be your initial or default state, default state could be an array, an object, a string or a boolean, the stateValue returned by useReducer initially it is going to represent the default value\n//The difference between useState and useReducer is that each and everytime you want to do something with the oldState, you must use dispatch it and it must go through the reducer function and reducer function can be considered as something that takes in something called action and then spits out the newState\n//A reducer function basically takes in two things, first is the state and the second is the action where state is the old or currentState and action is what you want to do with that state so a reducer function is going to manipulate the state once we call 'dispatch' or once we 'dispatch' the 'action'\n//The whole idea of useReducer is that you should be able to update everything at once when you call 'dispatch' and once you pass in the 'action' and all this is going to happen inside the reducer function\n//In order to affect anything in our state we are going to need to dispatch it\n\nconst reducer = (state, action) => {\n  //READ THIS AFTER GOING THROUGH THE COMMENTS IN THE SUBMIT HANDLER\n  //In the reducer, you have to return some kind of state otherwise the code that you have written that is dependent on the states won't make any sense, say you dispatch an action and don't return any kind of state from the reducer then your defaultState is going to go bananas, like you'll get an error after submitting the form 'cannot read 'isModalOpen' property of undefined' cause your reducer function has not returned any state, so reducer must return some kind of state in order for your functionalities to work\n  console.log(state, action); //Say you are checking if the 'type' attribute of 'action' is set to 'TESTING' and then returning the new state(which is an object in this case)\n\n  if (action.type === \"TESTING\") {\n    //You can't just add any properties while returning the new state, the newState must have all the properties of the old State, so it is best to use the spread operator and grab all the values of the oldState and then make changes to the required properties\n    return { ...state,\n      people: data,\n      isModalOpen: true,\n      modalContent: 'item added'\n    };\n  }\n};\n\nconst defaultState = {\n  people: [],\n  isModalOpen: false,\n  modalContent: \"\"\n};\n\nconst Index = () => {\n  const [name, setName] = useState(\"\");\n  const [state, dispatch] = useReducer(reducer, defaultState);\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    if (name) {\n      //Say we are setting the name after submitting the form, in order to update the name we need to call the dispatch function and pass in an object with a property called 'type', that object is essentially our 'action' and then you need to set the 'type' property to something usually something that is uppercase, say {type:'TESTING'}. Once you dispatch your action (call dispatch and pass in action) you need to handle the reducer\n      dispatch({\n        type: \"TESTING\"\n      });\n    } else {}\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, state.isModalOpen && /*#__PURE__*/React.createElement(Modal, {\n    modalContent: state.modalContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Add Item\")), state.people.map(person => {\n    const {\n      name,\n      id\n    } = person;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: id,\n      className: \"item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, name));\n  }));\n};\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/Adwait/OneDrive/Desktop/react-advanced-2020/src/tutorial/6-useReducer/setup/index.js"],"names":["React","useState","useReducer","useEffect","Modal","data","reducer","state","action","console","log","type","people","isModalOpen","modalContent","defaultState","Index","name","setName","dispatch","submitHandler","e","preventDefault","target","value","map","person","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,IAAT,QAAqB,eAArB,C,CACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC;AAEA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAAmBC,MAAnB,EAJiC,CAMjC;;AACA,MAAIA,MAAM,CAACG,IAAP,KAAgB,SAApB,EAA+B;AAC7B;AACA,WAAO,EAAC,GAAGJ,KAAJ;AAAWK,MAAAA,MAAM,EAACP,IAAlB;AAAwBQ,MAAAA,WAAW,EAAC,IAApC;AAA0CC,MAAAA,YAAY,EAAC;AAAvD,KAAP;AACD;AACF,CAXD;;AAaA,MAAMC,YAAY,GAAG;AACnBH,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,WAAW,EAAE,KAFM;AAGnBC,EAAAA,YAAY,EAAE;AAHK,CAArB;;AAMA,MAAME,KAAK,GAAG,MAAM;AAClB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACM,KAAD,EAAQY,QAAR,IAAoBjB,UAAU,CAACI,OAAD,EAAUS,YAAV,CAApC;;AAEA,QAAMK,aAAa,GAAIC,CAAD,IAAO;AAC3BA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAIL,IAAJ,EAAU;AACR;AACAE,MAAAA,QAAQ,CAAC;AAAER,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD,KAHD,MAGO,CACN;AACF,GAPD;;AASA,sBACE,0CACGJ,KAAK,CAACM,WAAN,iBAAqB,oBAAC,KAAD;AAAO,IAAA,YAAY,EAAEN,KAAK,CAACO,YAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADxB,eAEE;AAAM,IAAA,QAAQ,EAAEM,aAAhB;AAA+B,IAAA,SAAS,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAEH,IAFT;AAGE,IAAA,QAAQ,EAAGI,CAAD,IAAOH,OAAO,CAACG,CAAC,CAACE,MAAF,CAASC,KAAV,CAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAQE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF,CAFF,EAcGjB,KAAK,CAACK,MAAN,CAAaa,GAAb,CAAkBC,MAAD,IAAY;AAC5B,UAAM;AAAET,MAAAA,IAAF;AAAQU,MAAAA;AAAR,QAAeD,MAArB;AACA,wBACE;AAAK,MAAA,GAAG,EAAEC,EAAV;AAAc,MAAA,SAAS,EAAC,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKV,IAAL,CADF,CADF;AAKD,GAPA,CAdH,CADF;AAyBD,CAtCD;;AAwCA,eAAeD,KAAf","sourcesContent":["import React, { useState, useReducer, useEffect } from \"react\";\r\nimport Modal from \"./Modal\";\r\nimport { data } from \"../../../data\";\r\n// reducer function\r\n\r\n// const Index = () => {\r\n//   const [people, setPeople] = useState(data);\r\n//   const [name, setName] = useState('');\r\n//   const [showModal, setShowModal] = useState(false);\r\n\r\n//   const submitHandler = (e) => {\r\n//     e.preventDefault();\r\n//     if(name){\r\n//       setPeople([...people, {id:new Date().getTime().toString(), name}]);\r\n//       setName('');\r\n//     }else{\r\n//       setShowModal(true);\r\n//       return;\r\n//     }\r\n//   }\r\n\r\n//   return <>\r\n//     {showModal && <Modal/>}\r\n//     <form onSubmit={submitHandler} className='form'>\r\n//       <div>\r\n//         <input type='text' value={name} onChange={(e) => setName(e.target.value)}></input>\r\n//       </div>\r\n//       <button type='submit' className='btn'>Add Item</button>\r\n//     </form>\r\n//     {people.map(person => {\r\n//       const {name, id} = person;\r\n//       return(\r\n//         <div key={id} className='item'>\r\n//           <h4>{name}</h4>\r\n//         </div>\r\n//       )\r\n//     })}\r\n//   </>;\r\n// };\r\n\r\n//useReducer is going to add more structure to your state\r\n//everytime you invoke useReducer it is going to return two values, a stateValue and a dispatch function(), when you invoke useReducer you have to pass in a 'reducer' function and a second parameter which is going to be your initial or default state, default state could be an array, an object, a string or a boolean, the stateValue returned by useReducer initially it is going to represent the default value\r\n\r\n//The difference between useState and useReducer is that each and everytime you want to do something with the oldState, you must use dispatch it and it must go through the reducer function and reducer function can be considered as something that takes in something called action and then spits out the newState\r\n\r\n//A reducer function basically takes in two things, first is the state and the second is the action where state is the old or currentState and action is what you want to do with that state so a reducer function is going to manipulate the state once we call 'dispatch' or once we 'dispatch' the 'action'\r\n\r\n//The whole idea of useReducer is that you should be able to update everything at once when you call 'dispatch' and once you pass in the 'action' and all this is going to happen inside the reducer function\r\n\r\n//In order to affect anything in our state we are going to need to dispatch it\r\n\r\nconst reducer = (state, action) => {\r\n  //READ THIS AFTER GOING THROUGH THE COMMENTS IN THE SUBMIT HANDLER\r\n\r\n  //In the reducer, you have to return some kind of state otherwise the code that you have written that is dependent on the states won't make any sense, say you dispatch an action and don't return any kind of state from the reducer then your defaultState is going to go bananas, like you'll get an error after submitting the form 'cannot read 'isModalOpen' property of undefined' cause your reducer function has not returned any state, so reducer must return some kind of state in order for your functionalities to work\r\n  console.log(state, action);\r\n\r\n  //Say you are checking if the 'type' attribute of 'action' is set to 'TESTING' and then returning the new state(which is an object in this case)\r\n  if (action.type === \"TESTING\") {\r\n    //You can't just add any properties while returning the new state, the newState must have all the properties of the old State, so it is best to use the spread operator and grab all the values of the oldState and then make changes to the required properties\r\n    return {...state, people:data, isModalOpen:true, modalContent:'item added'}\r\n  }\r\n};\r\n\r\nconst defaultState = {\r\n  people: [],\r\n  isModalOpen: false,\r\n  modalContent: \"\",\r\n};\r\n\r\nconst Index = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [state, dispatch] = useReducer(reducer, defaultState);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (name) {\r\n      //Say we are setting the name after submitting the form, in order to update the name we need to call the dispatch function and pass in an object with a property called 'type', that object is essentially our 'action' and then you need to set the 'type' property to something usually something that is uppercase, say {type:'TESTING'}. Once you dispatch your action (call dispatch and pass in action) you need to handle the reducer\r\n      dispatch({ type: \"TESTING\" });\r\n    } else {\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {state.isModalOpen && <Modal modalContent={state.modalContent} />}\r\n      <form onSubmit={submitHandler} className=\"form\">\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n          ></input>\r\n        </div>\r\n        <button type=\"submit\" className=\"btn\">\r\n          Add Item\r\n        </button>\r\n      </form>\r\n      {state.people.map((person) => {\r\n        const { name, id } = person;\r\n        return (\r\n          <div key={id} className=\"item\">\r\n            <h4>{name}</h4>\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}