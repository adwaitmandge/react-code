{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adwait\\\\OneDrive\\\\Desktop\\\\react-advanced-2020\\\\src\\\\tutorial\\\\4-forms\\\\setup\\\\2-multiple-inputs.js\";\nimport React, { useState } from 'react'; // JS\n// const input = document.getElementById('myText');\n// const inputValue = input.value\n// React\n// value, onChange\n// dynamic object keys\n//Handling multiple input fields:\n//Instead of having states for each input, it would be better if we could just have one state for a given person\n\nconst ControlledInputs = () => {\n  // const [firstName, setFirstName] = useState('');\n  // const [email, setEmail] = useState('');\n  // const [age, setAge] = useState('');\n  const [person, setPerson] = useState({\n    firstName: '',\n    email: '',\n    age: ''\n  });\n  const [people, setPeople] = useState([]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (firstName && email) {\n      const person = {\n        id: new Date().getTime().toString(),\n        firstName,\n        email\n      };\n      console.log(person);\n      setPeople(people => {\n        return [...people, person];\n      });\n      setFirstName('');\n      setEmail('');\n    } else {\n      console.log('empty values');\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"article\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"firstName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, \"Name : \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"firstName\",\n    name: \"firstName\",\n    value: firstName,\n    onChange: e => setFirstName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, \"Email : \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    id: \"email\",\n    name: \"email\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"age\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"Age : \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    id: \"age\",\n    name: \"age\",\n    value: age,\n    onChange: e => setAge(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, \"add person\")), people.map((person, index) => {\n    const {\n      id,\n      firstName,\n      email\n    } = person;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"item\",\n      key: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    }, firstName), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    }, email));\n  })));\n};\n\nexport default ControlledInputs;","map":{"version":3,"sources":["C:/Users/Adwait/OneDrive/Desktop/react-advanced-2020/src/tutorial/4-forms/setup/2-multiple-inputs.js"],"names":["React","useState","ControlledInputs","person","setPerson","firstName","email","age","people","setPeople","handleSubmit","e","preventDefault","id","Date","getTime","toString","console","log","setFirstName","setEmail","target","value","setAge","map","index"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n// JS\r\n// const input = document.getElementById('myText');\r\n// const inputValue = input.value\r\n// React\r\n// value, onChange\r\n// dynamic object keys\r\n\r\n//Handling multiple input fields:\r\n//Instead of having states for each input, it would be better if we could just have one state for a given person\r\n\r\n\r\nconst ControlledInputs = () => {\r\n  // const [firstName, setFirstName] = useState('');\r\n  // const [email, setEmail] = useState('');\r\n  // const [age, setAge] = useState('');\r\n  const [person, setPerson] = useState({firstName:'', email:'', age: ''});\r\n  const [people, setPeople] = useState([]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (firstName && email) {\r\n      const person = { id: new Date().getTime().toString(), firstName, email };\r\n      console.log(person);\r\n      setPeople((people) => {\r\n        return [...people, person];\r\n      });\r\n      setFirstName('');\r\n      setEmail('');\r\n    } else {\r\n      console.log('empty values');\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <article>\r\n        <form className='form' onSubmit={handleSubmit}>\r\n          <div className='form-control'>\r\n            <label htmlFor='firstName'>Name : </label>\r\n            <input\r\n              type='text'\r\n              id='firstName'\r\n              name='firstName'\r\n              value={firstName}\r\n              onChange={(e) => setFirstName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className='form-control'>\r\n            <label htmlFor='email'>Email : </label>\r\n            <input\r\n              type='email'\r\n              id='email'\r\n              name='email'\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className='form-control'>\r\n            <label htmlFor='age'>Age : </label>\r\n            <input\r\n              type='text'\r\n              id='age'\r\n              name='age'\r\n              value={age}\r\n              onChange={(e) => setAge(e.target.value)}\r\n            />\r\n          </div>\r\n          <button type='submit'>add person</button>\r\n        </form>\r\n        {people.map((person, index) => {\r\n          const { id, firstName, email } = person;\r\n          return (\r\n            <div className='item' key={id}>\r\n              <h4>{firstName}</h4>\r\n              <p>{email}</p>\r\n            </div>\r\n          );\r\n        })}\r\n      </article>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ControlledInputs;\r\n"]},"metadata":{},"sourceType":"module"}